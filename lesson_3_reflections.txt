When would you want to create a remote repository rather than keeping all your work local?
I would create a remote repository if I want to access the repository from different computers or share the repository.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Because sometimes you'll make commits, but they are not ready to be in Git's public repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork is Git's version of clone; it creates a clone of another Git repository on GitHub.
Clones make a copy of a repository. You can clone a local repository or a remote repository.
Branches are labels for commits. You create branches to work on new features.

What is the benefit of having a copy of the last known state of the remote stored locally?
You can diff and merge without needing a network connection.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Another option for software collaboration is Tortoise SVN. A web page can host repositores, and user's can checkout copies, make commits, etc.of the repositories. I'm not sure if one is harder/easier.  Both seems very similar.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
I like to make any changes in a separate branch and then merge them into master only after they've been tested. This keeps master in a working state.
A benefit to making changes in master is that it's easier to make a individual changes.